<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wingman Command Center - Trading HQ</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, sans-serif;
            background: linear-gradient(135deg, #0a0e27 0%, #1a1f3a 100%);
            color: #e0e6f0;
            min-height: 100vh;
            overflow-x: hidden;
        }
        .dashboard-header {
            background: rgba(26, 31, 58, 0.95);
            backdrop-filter: blur(10px);
            padding: 25px 40px;
            border-bottom: 1px solid rgba(99, 102, 241, 0.2);
            position: sticky; top: 0; z-index: 100;
        }
        .header-content {
            max-width: 1400px; margin: 0 auto;
            display: flex; justify-content: space-between; align-items: center;
        }
        h1 { font-size: 2em; background: linear-gradient(45deg, #6366f1, #8b5cf6);
            -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent; font-weight: 700; }
        .status-badge { display: flex; align-items: center; gap: 10px; font-size: 0.9em; color: #10b981; }
        .status-dot { display: inline-block; width: 8px; height: 8px; border-radius: 50%;
            background: #10b981; box-shadow: 0 0 6px rgba(16, 185, 129, 0.8); animation: pulse 2s infinite; }
        @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.6; } }
        .container { max-width: 1400px; margin: 0 auto; padding: 40px 20px; }
        .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .grid.full-width { grid-template-columns: 1fr; }
        .grid.two-column { grid-template-columns: repeat(2, 1fr); }
        .grid.three-column { grid-template-columns: repeat(3, 1fr); }
        .card {
            background: rgba(26, 31, 58, 0.8);
            border: 1px solid rgba(99, 102, 241, 0.2);
            border-radius: 12px; padding: 24px; backdrop-filter: blur(10px);
            transition: all 0.3s ease; position: relative; overflow: hidden;
        }
        .card::before { content: ''; position: absolute; top: 0; left: 0; right: 0; height: 1px;
            background: linear-gradient(90deg, transparent, rgba(99, 102, 241, 0.4), transparent); }
        .card:hover { border-color: rgba(99, 102, 241, 0.4); box-shadow: 0 8px 24px rgba(99, 102, 241, 0.15); transform: translateY(-2px); }
        .card-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px; padding-bottom: 12px;
            border-bottom: 1px solid rgba(99, 102, 241, 0.2); }
        .card-title { font-size: 1.1em; font-weight: 600; color: #e0e6f0; }
        .card-value { font-size: 2em; font-weight: 700; background: linear-gradient(45deg, #6366f1, #8b5cf6); -webkit-background-clip: text;
            background-clip: text; -webkit-text-fill-color: transparent; }
        .card-detail { font-size: 0.9em; color: #9ca3af; margin-top: 8px; }
        .metric-row { display: flex; justify-content: space-between; padding: 12px 0; border-bottom: 1px solid rgba(99, 102, 241, 0.1); align-items: center; }
        .metric-row:last-child { border-bottom: none; }
        .metric-label { color: #9ca3af; font-size: 0.95em; }
        .metric-value { font-weight: 600; color: #e0e6f0; }
        .metric-value.positive { color: #10b981; }
        .metric-value.negative { color: #ef4444; }

        /* Daily Loss Limit Tracker */
        .limit-tracker { margin-top: 16px; }
        .limit-label { font-size: 0.85em; font-weight: 600; color: #9ca3af; margin-bottom: 8px; }
        .limit-bar-container { background: rgba(99,102,241,0.15); border-radius: 8px; height: 16px; overflow: hidden; border: 1px solid rgba(99,102,241,0.3); }
        .limit-bar { height: 100%; background: linear-gradient(90deg, #10b981, #84cc16); transition: width 0.5s ease; }
        .limit-bar.warning { background: linear-gradient(90deg, #f59e0b, #fbbf24); }
        .limit-bar.danger { background: linear-gradient(90deg, #ef4444, #f87171); }
        .limit-text { display: flex; justify-content: space-between; font-size: 0.8em; margin-top: 6px; color: #9ca3af; }
        .limit-status { font-weight: 600; color: #10b981; }
        .limit-status.warning { color: #f59e0b; }
        .limit-status.danger { color: #ef4444; }

        /* Trade Item Styling */
        .trade-item { background: rgba(99, 102, 241, 0.08); border-left: 3px solid #6366f1; padding: 12px; border-radius: 8px; margin-bottom: 10px; font-size: 0.9em; }
        .trade-item.loss { border-left-color: #ef4444; background: rgba(239, 68, 68, 0.08); }
        .trade-item.win { border-left-color: #10b981; background: rgba(16, 185, 129, 0.08); }
        .trade-item.violation { border-left-color: #f59e0b; background: rgba(245, 158, 11, 0.08); }
        .trade-header { display: flex; justify-content: space-between; margin-bottom: 6px; }
        .trade-symbol { font-weight: 700; color: #e0e6f0; }
        .trade-pnl { font-weight: 700; color: #10b981; }
        .trade-pnl.loss { color: #ef4444; }
        .trade-meta { display: flex; justify-content: space-between; font-size: 0.8em; color: #9ca3af; }

        /* Checklist Styling */
        .checklist-item { display: flex; gap: 8px; margin-bottom: 10px; }
        .checkbox { width: 20px; height: 20px; border: 2px solid rgba(99, 102, 241, 0.5); border-radius: 4px; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: all 0.2s; flex-shrink: 0; }
        .checkbox:hover { border-color: rgba(99, 102, 241, 1); }
        .checkbox.checked { background: #6366f1; border-color: #6366f1; color: white; }
        .checklist-label { font-size: 0.95em; color: #e0e6f0; flex: 1; }
        .checklist-status { margin-top: 12px; padding: 12px; border-radius: 8px; text-align: center; font-weight: 600; }
        .checklist-status.ready { background: rgba(16, 185, 129, 0.15); color: #10b981; border: 1px solid rgba(16, 185, 129, 0.3); }
        .checklist-status.notready { background: rgba(239, 68, 68, 0.15); color: #ef4444; border: 1px solid rgba(239, 68, 68, 0.3); }

        /* Rule Violation Display */
        .violation-badge { display: inline-block; background: rgba(239, 68, 68, 0.2); color: #fca5a5; padding: 4px 8px; border-radius: 4px; font-size: 0.8em; margin-right: 6px; margin-bottom: 4px; }

        /* Buttons */
        .button-group { display: flex; gap: 10px; flex-wrap: wrap; margin-top: 16px; }
        .btn { padding: 10px 14px; border: none; border-radius: 8px; font-size: 0.85em; font-weight: 600; cursor: pointer; transition: all 0.2s ease; }
        .btn-primary { background: linear-gradient(45deg, #6366f1, #8b5cf6); color: #fff; }
        .btn-primary:hover { transform: translateY(-2px); box-shadow: 0 8px 16px rgba(99, 102, 241, 0.4); }
        .btn-secondary { background: rgba(99, 102, 241, 0.15); color: #6366f1; border: 1px solid rgba(99, 102, 241, 0.3); }
        .btn-secondary:hover { background: rgba(99, 102, 241, 0.25); }

        /* Signal Compact */
        .signal-compact { text-align: center; }
        .signal-score-compact { font-size: 2.5em; font-weight: 700; background: linear-gradient(45deg, #6366f1, #8b5cf6); -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent; }
        .signal-tier-compact { font-size: 0.95em; font-weight: 600; margin-top: 4px; }
        .signal-delta-compact { font-size: 0.85em; margin-top: 4px; }
        .signal-delta-compact.positive { color: #10b981; }
        .signal-delta-compact.negative { color: #ef4444; }

        /* Session Stats */
        .stat-block { text-align: center; padding: 12px; background: rgba(99, 102, 241, 0.08); border-radius: 8px; margin-bottom: 10px; }
        .stat-value { font-size: 1.5em; font-weight: 700; color: #6366f1; }
        .stat-label { font-size: 0.8em; color: #9ca3af; margin-top: 4px; }

        /* Empty State */
        .empty-state { text-align: center; padding: 20px; color: #9ca3af; font-size: 0.9em; }

        details.command-group { background: rgba(99, 102, 241, 0.08); border: 1px solid rgba(99, 102, 241, 0.15); border-radius: 10px; padding: 14px 18px; }
        details.command-group[open] { border-color: rgba(99, 102, 241, 0.4); }
        details.command-group summary { cursor: pointer; font-weight: 600; color: #e0e6f0; outline: none; }
        details.command-group summary::-webkit-details-marker { display: none; }
        details.command-group summary::after { content: '▾'; float: right; transition: transform 0.2s ease; color: #9ca3af; }
        details.command-group[open] summary::after { transform: rotate(180deg); }
        .command-list { list-style: none; margin: 12px 0 0; padding: 0; display: flex; flex-direction: column; gap: 8px; }
        .command-list li { color: #9ca3af; font-size: 0.9em; line-height: 1.5; }
        .command-list code { background: rgba(99, 102, 241, 0.18); color: #e0e6f0; padding: 2px 6px; border-radius: 4px; font-size: 0.85em; }

        @media (max-width: 768px) {
            .grid.two-column, .grid.three-column { grid-template-columns: 1fr; }
            h1 { font-size: 1.5em; }
        }
    </style>
</head>
<body>
    <div class="dashboard-header">
        <div class="header-content">
            <h1>Wingman Command Center</h1>
            <div class="status-badge">
                <span class="status-dot"></span>
                <span>OPERATIONAL</span>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- ROW 1: COMPACT ACCOUNT + MARKET SIGNAL + MONTHLY GOAL (THREE COLUMN) -->
        <div class="grid three-column">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Trading Status</div>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Balance</span>
                    <span class="metric-value" id="account-balance">--</span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Today P/L</span>
                    <span class="metric-value" id="today-pnl">--</span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">YTD P/L</span>
                    <span class="metric-value positive" id="account-ytd">--</span>
                </div>
                <div class="limit-tracker">
                    <div class="limit-label">Daily Loss Limit</div>
                    <div class="limit-bar-container">
                        <div class="limit-bar" id="loss-limit-bar" style="width: 8%"></div>
                    </div>
                    <div class="limit-text">
                        <span id="loss-used">$21 / $250</span>
                        <span class="limit-status" id="loss-status">SAFE</span>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <div class="card-title">Market Signal</div>
                </div>
                <div class="signal-compact">
                    <div class="signal-score-compact" id="signal-score">--</div>
                    <div class="signal-tier-compact" id="signal-tier">UNKNOWN</div>
                    <div class="signal-delta-compact" id="signal-delta"></div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <div class="card-title">Monthly Goal</div>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Target</span>
                    <span class="metric-value">$2,500</span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Progress</span>
                    <span class="metric-value positive" id="monthly-progress">--</span>
                </div>
                <div class="limit-tracker">
                    <div class="limit-label">Goal Progress</div>
                    <div class="limit-bar-container">
                        <div class="limit-bar" id="monthly-goal-bar" style="width: 0%; background: linear-gradient(90deg, #8b5cf6, #6366f1);"></div>
                    </div>
                    <div class="limit-text">
                        <span id="monthly-amount">$0 / $2,500</span>
                        <span class="limit-status" id="monthly-status">--</span>
                    </div>
                </div>
                <div class="card-detail" style="margin-top: 12px;">
                    <span id="daily-rate">Daily Rate: $83/day</span>
                </div>
            </div>
        </div>

        <!-- ROW 2: RULE COMPLIANCE -->
        <div class="grid full-width">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Rule Compliance (Today)</div>
                </div>
                <div id="compliance-container">
                    <div class="empty-state">No trades yet</div>
                </div>
            </div>
        </div>

        <!-- ROW 3: ACTIVE POSITION (CONDITIONAL) -->
        <div class="grid full-width" id="active-position-row" style="display: none;">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Active Position</div>
                </div>
                <div id="active-position-container"></div>
            </div>
        </div>

        <!-- ROW 4: PRE-ENTRY THREAT ASSESSMENT -->
        <div class="grid full-width">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Pre-Entry Threat Assessment Checklist</div>
                </div>
                <div id="threat-checklist">
                    <div class="checklist-item">
                        <div class="checkbox" onclick="toggleCheck(this)">✓</div>
                        <label class="checklist-label">C+R Confirmation (close+retest)</label>
                    </div>
                    <div class="checklist-item">
                        <div class="checkbox" onclick="toggleCheck(this)">✓</div>
                        <label class="checklist-label">EMA Filter (5-min 200 EMA direction)</label>
                    </div>
                    <div class="checklist-item">
                        <div class="checkbox" onclick="toggleCheck(this)">✓</div>
                        <label class="checklist-label">Volume ≥ 1.3× 20-bar average</label>
                    </div>
                    <div class="checklist-item">
                        <div class="checkbox" onclick="toggleCheck(this)">✓</div>
                        <label class="checklist-label">ADD Confirmation (breadth direction)</label>
                    </div>
                    <div class="checklist-item">
                        <div class="checkbox" onclick="toggleCheck(this)">✓</div>
                        <label class="checklist-label">Signal Tier ≥ MODERATE</label>
                    </div>
                    <div class="checklist-item">
                        <div class="checkbox" onclick="toggleCheck(this)">✓</div>
                        <label class="checklist-label">Risk Calculated ($231 max)</label>
                    </div>
                    <div class="checklist-status notready" id="checklist-status">✗ CRITERIA NOT MET - WAIT</div>
                </div>
            </div>
        </div>

        <!-- ROW 5: SESSION PERFORMANCE + QUICK ACTIONS -->
        <div class="grid two-column">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Session Performance</div>
                </div>
                <div class="stat-block">
                    <div class="stat-value" id="session-trades">1</div>
                    <div class="stat-label">Trades Executed</div>
                </div>
                <div class="stat-block">
                    <div class="stat-value" id="session-winrate">0%</div>
                    <div class="stat-label">Win Rate</div>
                </div>
                <div class="stat-block">
                    <div class="stat-value" id="session-compliance">0%</div>
                    <div class="stat-label">Rule Compliance</div>
                </div>
                <div id="session-pattern" class="card-detail" style="margin-top: 12px;"></div>
            </div>

            <div class="card">
                <div class="card-header">
                    <div class="card-title">Quick Actions</div>
                </div>
                <div class="button-group" style="flex-direction: column; gap: 8px;">
                    <button class="btn btn-primary">📝 Record Trade</button>
                    <button class="btn btn-secondary">📊 EOD Wrap</button>
                    <button class="btn btn-secondary">📋 Review Rules</button>
                </div>
            </div>
        </div>

        <!-- ROW 6: RECENT TRADES -->
        <div class="grid full-width">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Recent Trades</div>
                </div>
                <div id="recent-trades-container">
                    <div class="empty-state">No trades recorded yet</div>
                </div>
            </div>
        </div>

        <!-- ROW 7: COMMAND REFERENCE (COLLAPSED) -->
        <div class="grid full-width">
            <div class="card">
                <details class="command-group">
                    <summary>Wingman Commands Reference</summary>
                    <ul class="command-list">
                        <li><code>wingman, status</code> — Full system readout</li>
                        <li><code>wingman, signal</code> — Current market signal</li>
                        <li><code>wingman, rules</code> — Active trading rules</li>
                        <li><code>wingman, analyze [TICKER]</code> — Full probability breakdown</li>
                        <li><code>NVDA long 100 @ 189.50, stop 188, target 192</code> — Log entry</li>
                        <li><code>Out at [PRICE]</code> — Close position</li>
                        <li><code>wingman, eod wrap</code> — End-of-day summary</li>
                    </ul>
                </details>
            </div>
        </div>
    </div>

    <script>
        function toggleCheck(element) {
            element.classList.toggle('checked');
            updateChecklistStatus();
        }

        function updateChecklistStatus() {
            const checkboxes = document.querySelectorAll('#threat-checklist .checkbox');
            const allChecked = Array.from(checkboxes).every(cb => cb.classList.contains('checked'));
            const statusEl = document.getElementById('checklist-status');

            if (allChecked) {
                statusEl.textContent = '✓ ALL CLEAR - READY TO TRADE';
                statusEl.className = 'checklist-status ready';
            } else {
                statusEl.textContent = '✗ CRITERIA NOT MET - WAIT';
                statusEl.className = 'checklist-status notready';
            }
        }

        async function refreshDashboard() {
            try {
                const stateResponse = await fetch('./.session_state.json');
                const state = await stateResponse.json();

                const ledgerResponse = await fetch('./trades_ledger.json');
                const ledger = await ledgerResponse.json();

                // Update Account Status
                const balance = state.account?.balance || 0;
                const ytdPl = state.account?.ytd_pl || 0;
                const todayPnl = state.account?.today_pnl || 0;

                document.getElementById('account-balance').textContent = `$${balance.toLocaleString('en-US', {maximumFractionDigits: 2})}`;
                document.getElementById('account-ytd').textContent = `$${ytdPl.toLocaleString('en-US', {maximumFractionDigits: 2})}`;

                const todayEl = document.getElementById('today-pnl');
                todayEl.textContent = `$${Math.abs(todayPnl).toLocaleString('en-US', {maximumFractionDigits: 2})}`;
                todayEl.className = `metric-value ${todayPnl >= 0 ? 'positive' : 'negative'}`;

                // Update Market Signal
                const signalScore = state.market?.signal_score || 0;
                const signalTier = state.market?.signal_tier || 'UNKNOWN';
                const delta = state.market?.delta || 0;

                document.getElementById('signal-score').textContent = signalScore.toFixed(1);
                document.getElementById('signal-tier').textContent = signalTier;
                document.getElementById('signal-tier').className = `signal-tier-compact ${signalTier.toLowerCase().replace(/\s+/g, '-')}`;

                const deltaEl = document.getElementById('signal-delta');
                if (delta !== 0) {
                    const deltaText = delta > 0 ? `+${delta.toFixed(1)}` : delta.toFixed(1);
                    deltaEl.textContent = deltaText;
                    deltaEl.className = delta > 0 ? 'signal-delta-compact positive' : delta < 0 ? 'signal-delta-compact negative' : 'signal-delta-compact';
                }

                // Update Daily Loss Limit
                updateLossLimitDisplay(todayPnl);

                // Update Rule Compliance (use ledger data)
                updateRuleComplianceFromLedger(ledger);

                // Update Recent Trades (use ledger data)
                updateRecentTradesFromLedger(ledger);

                // Update Session Performance (use ledger data)
                updateSessionPerformanceFromLedger(ledger);

                // Update Monthly Goal Tracker
                updateMonthlyGoal(ytdPl);

            } catch (error) {
                console.error('Error refreshing dashboard:', error);
            }
        }

        function updateMonthlyGoal(ytdPl) {
            const monthlyGoal = 2500;
            const today = new Date();
            const daysInMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate();
            const dayOfMonth = today.getDate();
            const daysRemaining = daysInMonth - dayOfMonth;

            // For monthly tracking, we'll use a simplified approach:
            // If we're early in the month, use YTD as proxy for current month
            // This assumes the user tracks monthly independently
            const monthlyProgress = ytdPl; // Simplified - in production would pull actual month P&L
            const percentage = (monthlyProgress / monthlyGoal) * 100;
            const dailyRequired = monthlyGoal / daysInMonth;
            const dailyAverage = dayOfMonth > 0 ? monthlyProgress / dayOfMonth : 0;

            // Update progress bar
            const bar = document.getElementById('monthly-goal-bar');
            bar.style.width = Math.min(100, percentage) + '%';

            // Update amount display
            document.getElementById('monthly-amount').textContent = `$${monthlyProgress.toFixed(2)} / $${monthlyGoal}`;
            document.getElementById('monthly-progress').textContent = `${percentage.toFixed(1)}%`;

            // Update daily rate display
            const rateText = dailyAverage > 0 ? `Daily Rate: $${dailyAverage.toFixed(0)}/day` : `Daily Target: $${dailyRequired.toFixed(0)}/day`;
            document.getElementById('daily-rate').textContent = rateText;

            // Update status
            const statusEl = document.getElementById('monthly-status');
            if (percentage >= 100) {
                statusEl.textContent = 'GOAL MET ✓';
                statusEl.className = 'limit-status';
                statusEl.style.color = '#10b981';
            } else if (percentage >= 75) {
                statusEl.textContent = 'ON PACE';
                statusEl.className = 'limit-status';
                statusEl.style.color = '#10b981';
            } else if (percentage >= 50) {
                statusEl.textContent = 'HALFWAY';
                statusEl.className = 'limit-status';
                statusEl.style.color = '#f59e0b';
            } else {
                statusEl.textContent = 'BUILDING';
                statusEl.className = 'limit-status';
                statusEl.style.color = '#6366f1';
            }
        }

        function updateRuleComplianceFromLedger(ledger) {
            const container = document.getElementById('compliance-container');
            const stats = ledger.statistics;

            if (!stats) {
                container.innerHTML = '<div class="empty-state">No ledger data</div>';
                return;
            }

            const latestTrade = ledger.trades[ledger.trades.length - 1];
            const violations = latestTrade?.rule_violations || [];

            let html = `
                <div class="metric-row">
                    <span class="metric-label">Total Trades</span>
                    <span class="metric-value">${stats.overall.total_trades}</span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Win Rate</span>
                    <span class="metric-value positive">${stats.overall.win_rate.toFixed(1)}%</span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Compliance Rate</span>
                    <span class="metric-value ${stats.compliance.compliance_percentage >= 80 ? 'positive' : 'negative'}">${stats.compliance.compliance_percentage.toFixed(1)}%</span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Profit Factor</span>
                    <span class="metric-value positive">${stats.performance.profit_factor.toFixed(2)}:1</span>
                </div>
                ${violations.length > 0 ? `<div style="margin-top: 12px;">${violations.slice(0, 2).map(v => `<span class="violation-badge">${v.substring(0, 30)}...</span>`).join('')}</div>` : ''}
                <div class="card-detail" style="margin-top: 12px; color: ${stats.compliance.compliance_percentage >= 80 ? '#10b981' : '#f59e0b'}">
                    ${stats.compliance.compliance_percentage >= 80 ? '✓ Good compliance trend' : '⚠️ Focus on checklist before entry'}
                </div>
            `;
            container.innerHTML = html;
        }

        function updateRecentTradesFromLedger(ledger) {
            const container = document.getElementById('recent-trades-container');
            const trades = ledger.trades || [];

            if (trades.length === 0) {
                container.innerHTML = '<div class="empty-state">No trades recorded</div>';
                return;
            }

            let html = '';
            [...trades].reverse().slice(0, 5).forEach(trade => {
                const pnl = trade.pnl || 0;
                const isProfitable = pnl >= 0;
                const hasViolations = (trade.rule_violations || []).length > 0;
                const itemClass = hasViolations ? 'violation' : (isProfitable ? 'win' : 'loss');

                html += `
                    <div class="trade-item ${itemClass}">
                        <div class="trade-header">
                            <span class="trade-symbol">${trade.symbol} ${trade.direction.toUpperCase().substring(0, 1)}</span>
                            <span class="trade-pnl ${isProfitable ? '' : 'loss'}">${isProfitable ? '+' : ''}$${Math.abs(pnl).toFixed(0)}</span>
                        </div>
                        <div class="trade-meta">
                            <span>${trade.date}</span>
                            <span>${trade.setup_type.substring(0, 25)}</span>
                        </div>
                    </div>
                `;
            });
            container.innerHTML = html;
        }

        function updateSessionPerformanceFromLedger(ledger) {
            const stats = ledger.statistics;
            const trades = ledger.trades || [];

            document.getElementById('session-trades').textContent = stats.overall.total_trades;
            document.getElementById('session-winrate').textContent = stats.overall.win_rate.toFixed(0) + '%';
            document.getElementById('session-compliance').textContent = stats.compliance.compliance_percentage.toFixed(0) + '%';

            let pattern = `Trading started - ${stats.overall.total_trades} trades logged`;
            if (trades.length > 0) {
                const violations = stats.compliance.total_violations;
                if (violations > 0) {
                    pattern = `Pattern: ${violations} violation(s) detected. Focus: Run threat assessment BEFORE entry.`;
                } else if (stats.overall.win_rate >= 60) {
                    pattern = 'Pattern: High win rate with discipline ✓';
                } else if (stats.compliance.compliance_percentage >= 80) {
                    pattern = 'Pattern: Strong compliance, building consistency';
                } else {
                    pattern = 'Pattern: Learning phase - compliance improving';
                }
            }

            document.getElementById('session-pattern').textContent = pattern;
        }

        function updateLossLimitDisplay(todayPnl) {
            const dailyLimit = 250;
            const used = Math.abs(todayPnl);
            const remaining = dailyLimit - used;
            const percentage = (used / dailyLimit) * 100;

            const bar = document.getElementById('loss-limit-bar');
            bar.style.width = percentage + '%';

            let statusClass = 'limit-status';
            let statusText = 'SAFE';
            if (percentage >= 80) {
                statusClass += ' danger';
                statusText = 'DANGER';
            } else if (percentage >= 50) {
                statusClass += ' warning';
                statusText = 'WARNING';
            }

            document.getElementById('loss-status').className = statusClass;
            document.getElementById('loss-status').textContent = statusText;
            document.getElementById('loss-used').textContent = `$${used.toFixed(2)} / $${dailyLimit}`;

            if (percentage >= 80) {
                bar.className = 'limit-bar danger';
            } else if (percentage >= 50) {
                bar.className = 'limit-bar warning';
            }
        }

        function updateRuleCompliance(state) {
            const container = document.getElementById('compliance-container');
            const recentTrades = state.account?.recent_trades || [];

            if (recentTrades.length === 0) {
                container.innerHTML = '<div class="empty-state">No trades yet - no compliance data</div>';
                return;
            }

            const lastTrade = recentTrades[0];
            const violations = (lastTrade.raw_notes || '').match(/Rule \d+/g) || [];

            let html = `
                <div class="metric-row">
                    <span class="metric-label">Total Trades</span>
                    <span class="metric-value">${recentTrades.length}</span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Last Trade Violations</span>
                    <span class="metric-value">${violations.length > 0 ? violations.length : '0'}</span>
                </div>
                ${violations.length > 0 ? `<div style="margin-top: 12px;">${violations.map(v => `<span class="violation-badge">${v}</span>`).join('')}</div>` : ''}
                <div class="card-detail" style="margin-top: 12px; color: ${violations.length > 0 ? '#ef4444' : '#10b981'}">
                    ${violations.length > 0 ? '⚠️ Violations detected in last trade' : '✓ Last trade compliant'}
                </div>
            `;
            container.innerHTML = html;
        }

        function updateRecentTrades(trades) {
            const container = document.getElementById('recent-trades-container');

            if (!trades || trades.length === 0) {
                container.innerHTML = '<div class="empty-state">No trades recorded yet</div>';
                return;
            }

            let html = '';
            trades.slice(0, 5).forEach(trade => {
                const pnl = trade.pnl || 0;
                const isProfitable = pnl >= 0;
                const hasViolations = (trade.raw_notes || '').includes('Rule');
                const itemClass = hasViolations ? 'violation' : (isProfitable ? 'win' : 'loss');

                html += `
                    <div class="trade-item ${itemClass}">
                        <div class="trade-header">
                            <span class="trade-symbol">${trade.symbol || '--'}</span>
                            <span class="trade-pnl ${isProfitable ? '' : 'loss'}">${isProfitable ? '+' : ''}$${Math.abs(pnl).toFixed(2)}</span>
                        </div>
                        <div class="trade-meta">
                            <span>${trade.date || '--'} ${trade.time || ''}</span>
                            <span>${trade.setup_type || '--'}</span>
                        </div>
                    </div>
                `;
            });
            container.innerHTML = html;
        }

        function updateSessionPerformance(state) {
            const trades = state.account?.recent_trades || [];
            const wins = trades.filter(t => (t.pnl || 0) > 0).length;
            const winRate = trades.length > 0 ? Math.round((wins / trades.length) * 100) : 0;
            const violations = trades.filter(t => (t.raw_notes || '').includes('Rule')).length;
            const compliance = trades.length > 0 ? Math.round(((trades.length - violations) / trades.length) * 100) : 0;

            document.getElementById('session-trades').textContent = trades.length;
            document.getElementById('session-winrate').textContent = winRate + '%';
            document.getElementById('session-compliance').textContent = compliance + '%';

            let pattern = 'Pattern: Starting fresh session';
            if (trades.length > 0) {
                if (violations > 0) {
                    pattern = `Pattern: ${violations} rule violation${violations > 1 ? 's' : ''} (${compliance}% compliance)`;
                } else if (winRate >= 50) {
                    pattern = 'Pattern: Disciplined execution ✓';
                } else {
                    pattern = 'Pattern: Learning phase - focus on rules';
                }
            }

            document.getElementById('session-pattern').textContent = pattern;
        }

        document.addEventListener('DOMContentLoaded', () => {
            refreshDashboard();
            setInterval(refreshDashboard, 30000);
        });
    </script>
</body>
</html>
