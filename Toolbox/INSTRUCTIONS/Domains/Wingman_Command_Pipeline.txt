================================================================================
WINGMAN THREE-STAGE COMMAND PIPELINE
================================================================================

PURPOSE: Clearly define the three-stage workflow for market analysis and
dashboard updates. Each stage is independent and uses previous stage output.

STATUS: PRODUCTION - October 23, 2025
LAST UPDATED: October 23, 2025

================================================================================
THE THREE STAGES
================================================================================

                    ┌─────────────────────────────────────┐
                    │   1. WINGMAN RECON (~2 min)        │
                    │   Data Collection                   │
                    └────────────────┬────────────────────┘
                                     │
                                     ↓
                    ┌─────────────────────────────────────┐
                    │   2. WINGMAN PREP (~30-45 min)     │
                    │   Research & Signal Calculation     │
                    └────────────────┬────────────────────┘
                                     │
                                     ↓
                    ┌─────────────────────────────────────┐
                    │   3. WINGMAN DASH (~2-3 min)       │
                    │   Dashboard Visualization           │
                    └─────────────────────────────────────┘


================================================================================
STAGE 1: WINGMAN RECON - DATA COLLECTION
================================================================================

COMMAND:
    "wingman recon"

EXECUTION:
    python scripts/automation/run_all_scrapers.py

DURATION:
    ~2 minutes

PURPOSE:
    Collect fresh market data from all providers.
    This is the ONLY time fresh data should be fetched.

DATA SOURCES:
    ✓ RSS Feeds (MarketWatch, CNBC, Seeking Alpha, CoinDesk, Federal Reserve)
    ✓ X/Twitter Feeds (Crypto, Macro, Technicals tracked lists)
    ✓ YouTube Channels (Benjamin Cowen, Ripster, Mayne - transcripts/summaries)
    ✓ Technical Data (TradingView snapshots, technical indicators)

OUTPUT:
    Research/RSS/2025-10-23_*.json            (RSS articles, scraped data)
    Research/X/Crypto/x_list_posts_*.json     (Twitter posts by category)
    Research/X/Macro/x_list_posts_*.json
    Research/X/Technicals/x_list_posts_*.json
    Research/YouTube/2025-10-23_*.json        (Video summaries/transcripts)
    Research/Technical/2025-10-23_*.json      (Technical data snapshots)

WHAT WINGMAN DASH DOES NOT:
    ✗ Does NOT fetch new market data
    ✗ Does NOT re-scrape RSS feeds
    ✗ Does NOT call Yahoo Finance
    ✗ Does NOT check APIs for fresh prices

WINGMAN DASH USES:
    ✓ Existing recon data (same-day)

STATUS NOTIFICATION:
    🔍 [ORANGE] Wingman Recon running...

NEXT STEP:
    After recon completes, run: wingman prep


================================================================================
STAGE 2: WINGMAN PREP - RESEARCH & SIGNAL CALCULATION
================================================================================

COMMAND:
    "wingman prep"

EXECUTION:
    ⚠️  IMPORTANT: PREP is NOT a Python script execution

    PREP is a MANUAL AI WORKFLOW executed in this conversation
    Follow: Toolbox/INSTRUCTIONS/Research/How_to_use_Research.txt (Steps 0-4)

    What WINGMAN PREP does (NOT automated):
    - Step 0: Verify scrapers + run web searches
    - Step 1: Create individual provider summaries (16+ files)
    - Step 2: Create category overviews (4 files)
    - Step 3: Create market sentiment overview (1 file)
    - Step 4: Calculate trading signals (via Python script)

DURATION:
    ~30-45 minutes (manual AI work, not instant)

PURPOSE:
    Analyze collected data and generate AI-driven research summaries.
    Calculate composite trading signal (0-100 score).

DATA SOURCES USED:
    ✓ All data from wingman recon (same-day)
    ✓ Previous account state and positions
    ✓ Historical research data for context

PROCESS:
    Step 0A: VERIFY SCRAPER DATA FRESHNESS (MANDATORY)
    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    ⚠️  CRITICAL: This is MANDATORY. Do NOT skip. Do NOT search manually.

    COMMAND (run this FIRST, do NOT use Glob/Read to search):

      python scripts/utilities/verify_scraper_data.py YYYY-MM-DD

    INTERPRET THE OUTPUT:

      Exit code 0 + "✅ ALL DATA FRESH - READY FOR WINGMAP PREP"
        → Proceed to STEP 0B

      Exit code 2 + "❌ DATA INCOMPLETE - DO NOT PROCEED"
        → STOP workflow
        → Report to Commander: "Recon incomplete. Missing: [list from output]"
        → Recommend: "Run 'wingman recon' first"

      Exit code 1 + error message
        → STOP workflow
        → Report error to Commander

    DO NOT:
      ❌ Search for files manually using Glob
      ❌ Try to interpret file patterns yourself
      ❌ Check archive folders
      ❌ Guess if data is fresh based on file counts

    TRUST THE SCRIPT - It is the single source of truth for data freshness.
    The script handles:
      - Date format conversions (2025-10-25 vs 20251025)
      - Archive vs current file distinction
      - Provider-specific file patterns
      - Freshness thresholds

    Step 0B: Run web searches for missing market data
    Step 1.3: Create 7 technical summaries
             - TradingView SPX Summary
             - TradingView BTC Summary
             - TradingView QQQ Summary
             - TradingView SOL Summary
             - Fear & Greed Index Summary
             - Market Breadth Summary
             - Volatility Metrics Summary
    Step 1.4: Create 4 X/Twitter summaries
             - Crypto Summary (400+ posts analyzed)
             - Macro Summary (200+ posts analyzed)
             - Technicals Summary (100+ posts analyzed)
             - Bookmarks Summary
    Step 2: Create category overviews
           - RSS Category Overview
           - Technical Category Overview
           - X/Twitter Category Overview
    Step 3: Create market sentiment overview
           - Key themes (cross-provider consensus)
           - Market sentiment synthesis
           - Risk assessment
    Step 4: Calculate trading signals
           - Composite score (0-100)
           - Component breakdown (Trend, Breadth, Volatility, Technical, Seasonality)
           - Signal tier (WEAK/MODERATE/STRONG/EXTREME)

OUTPUT:
    Research/Technicals/*/2025-10-23_*_Summary.md     (7 summaries)
    Research/X/2025-10-23_X_*_Summary.md             (4 summaries)
    Research/2025-10-23_*_Category_Overview.md       (3 overviews)
    Research/.cache/2025-10-23_*_Overview.md         (final overviews)
    Research/.cache/signals_2025-10-23.json          (signal score)
    Research/.cache/2025-10-23_key_themes.md         (cross-provider themes)
    Research/.cache/2025-10-23_Market_Sentiment_Overview.md

SIGNAL OUTPUT EXAMPLE:
    {
      "date": "2025-10-23",
      "composite": 58,
      "tier": "MODERATE",
      "breakdown": {
        "trend": 18,
        "breadth": 15,
        "volatility": 13,
        "technical": 12,
        "seasonality": 5
      }
    }

WHAT WINGMAN PREP DOES NOT:
    ✗ Does NOT run Python scripts for scrapers
    ✗ Does NOT call APIs for market data
    ✗ Does NOT update the dashboard
    ✗ Does NOT run verify_timestamps script

WHAT WINGMAN PREP DOES:
    ✓ Reads raw data from RECON (JSON files, article text)
    ✓ Creates 16+ research summary markdown files (AI work)
    ✓ Creates 4 category overview markdown files (AI work)
    ✓ Creates market sentiment overview (AI work)
    ✓ Runs signal calculation script (0.1 sec)
    ✓ Outputs signals_YYYY-MM-DD.json
    ✓ Ready for WINGMAN DASH

WINGMAN DASH USES:
    ✓ All research summaries created here
    ✓ Signal score (composite, tier, breakdown)
    ✓ Key themes for AI interpretations

STATUS NOTIFICATION:
    📊 [BLUE] Wingman Prep running...

NEXT STEP:
    After prep completes, run: wingman dash


================================================================================
STAGE 3: WINGMAN DASH - DASHBOARD VISUALIZATION
================================================================================

COMMAND:
    "wingman dash"

EXECUTION:
    python scripts/automation/wingman_dash.py 2025-10-23

DURATION:
    ~2-3 minutes

PURPOSE:
    Update research dashboard and master plan using existing data.
    Verify all sections are current.
    Identify stale AI-driven interpretations.

WORKFLOW:

    Phase 1: Timestamp Verification
    --------------------------------
    - Run: verify_timestamps.py --json --date 2025-10-23
    - Purpose: Check which sections are stale
    - Output: JSON report with health percentage
    - Action: Identify sections needing AI updates

    Phase 2: Automated Sync Scripts
    --------------------------------
    - Run sync_social_tab.py (X Sentiment data)
    - Run update_x_sentiment_tab.py (X Sentiment trending topics) ✅ NEW - Oct 26, 2025
    - Run sync_technicals_tab.py (Technical data)
    - Run sync_news_tab.py (RSS/News data)
    - Run sync_daily_planner.py (Daily planning data)
    - Run sync_risk_items.py (Dashboard risk items) ✅ NEW - Oct 25, 2025
    - Run sync_provider_consensus.py (Dashboard consensus themes) ✅ NEW - Oct 25, 2025
    - Run sync_portfolio_recommendation.py (Portfolio recommendations) ✅ NEW - Oct 25, 2025
    - Run update_markets_intelligence.py (Markets Intelligence narrative prompt)
    - Run sync_quick_actions.py (Quick actions data)
    - Purpose: Automated updates for data-driven sections
    - Action: Populate dashboard with fresh content from research files

    NOTE: Several scripts automatically extract/generate dashboard sections from research data:
      • sync_risk_items.py + sync_provider_consensus.py: from Research/.cache/YYYY-MM-DD_Market_Sentiment_Overview.md
      • sync_portfolio_recommendation.py: from Journal/portfolio_decisions/YYYY-MM-DD_portfolio_*.txt
      • update_x_sentiment_tab.py: from Research/X/Trends/YYYY-MM-DD_trending_words.json
        - Updates: crypto_trending.updatedAt and macro_trending.updatedAt timestamps
        - Ensures trending topics show as current (not stale) on dashboard
    These scripts MUST be run as part of Phase 2 for full dashboard automation.

    Phase 3: Update Master Plan
    ---------------------------
    - Run: update_master_plan.py 2025-10-23
    - Purpose: Update all dates and timestamps
    - Input: signals_2025-10-23.json
    - Output: Updated master-plan.md

    Phase 4: Final Verification
    ---------------------------
    - Run: verify_timestamps.py (verify all sections current)
    - Purpose: Confirm dashboard health is 100%
    - Action: Report status to user

    Phase 5: AI Interpretation Updates (CRITICAL - MANDATORY ORDER)
    ================================================================================

    ⚠️  CRITICAL: Follow this EXACT order. DO NOT skip steps. DO NOT update parent timestamps first.
    TIMESTAMP HIERARCHY: Parent timestamps = verification signals (update LAST)
                        Child timestamps = content timestamps (update FIRST)

    STEP 5.1: READ RESEARCH SOURCES
    --------------------------------
    ACTION: Read ALL research source files identified in stale_sections_YYYY-MM-DD.json

    Required files to read BEFORE any updates:
      • Research/.cache/YYYY-MM-DD_Market_Sentiment_Overview.md
      • Research/YYYY-MM-DD_Technical_Category_Overview.md
      • Research/.cache/signals_YYYY-MM-DD.json
      • Journal/account_state.json (for portfolio sections)
      • Research/YYYY-MM-DD_RSS_Category_Overview.md (for news sections)

    VERIFY: Have you read ALL sources? → Proceed to STEP 5.2


    STEP 5.2: SYNTHESIZE AI NARRATIVES
    -----------------------------------
    ACTION: Create AI-driven narratives from research (Bloomberg-style, specific data)

    For EACH stale section in ai_update_prompts.json, draft:
      • summary: Concise market context (≤600 chars, 2-3 sentences)
      • keyInsight: Critical single insight (≤600 chars, 1 sentence)
      • action: Actionable guidance with levels/catalysts (≤600 chars, 2-3 sentences)
      • sentiment: Value = "cautiously bullish"|"neutral"|"cautiously bearish"|"bullish"|"bearish"
      • confidence: Value = "low"|"medium"|"medium-high"|"high"

    DO NOT update timestamps yet. Only create content.

    VERIFY: Have you drafted ALL narratives? → Proceed to STEP 5.3


    STEP 5.3: UPDATE CHILD CONTENT SECTIONS (CONTENT FIRST!)
    =========================================================
    ⚠️  THIS STEP UPDATES THE ACTUAL CONTENT + CHILD TIMESTAMPS ONLY
        DO NOT UPDATE PARENT TIMESTAMPS (dashboard.sentimentCardsUpdated, etc.)

    For EACH stale section:
      1. Edit master-plan.md
      2. Update the CONTENT FIELDS (summary, keyInsight, action, sentiment, confidence)
      3. Update the CHILD timestamp ONLY: tabs.*.aiInterpretation.updatedAt
      4. Save changes

    Example CORRECT order:
      ```yaml
      tabs:
        markets:
          aiInterpretation:
            summary: "Fresh narrative..."             # ← Edit content
            keyInsight: "Critical insight..."         # ← Edit content
            action: "Specific guidance..."            # ← Edit content
            sentiment: "cautiously bullish"           # ← Edit content
            confidence: "medium-high"                 # ← Edit content
            updatedAt: '2025-10-25T06:15:00Z'         # ← Update CHILD timestamp
      ```

    DO NOT UPDATE (these are parent/verification timestamps):
      ❌ dashboard.sentimentCardsUpdated
      ❌ dashboard.metricsUpdated
      ❌ dashboard.riskItemsUpdated
      ❌ Any top-level verification timestamps

    VERIFY: Have you updated ALL child sections with content + child timestamps? → Proceed to STEP 5.4


    STEP 5.4: UPDATE PARENT VERIFICATION TIMESTAMPS (ONLY AFTER STEP 5.3 100% DONE!)
    ====================================================================================
    ⚠️  ONLY execute this step AFTER Step 5.3 is completely finished

    ACTION: Update parent verification timestamps to signal "all children current"

    These are the VERIFICATION signals (turn green ONLY after work is complete):
      ```yaml
      dashboard:
        sentimentCardsUpdated: '2025-10-25T06:15:00Z'    # ← NOW update parent
        metricsUpdated: '2025-10-25T06:15:00Z'           # ← Parent verification
        riskItemsUpdated: '2025-10-25T06:15:00Z'         # ← Parent verification
      ```

    VERIFY: Have you updated parent timestamps? → Proceed to STEP 5.5


    STEP 5.5: VERIFY 100% HEALTH
    ============================
    ACTION: Run verification to confirm all sections current

    COMMAND:
      python scripts/utilities/verify_timestamps.py --date YYYY-MM-DD

    EXPECTED OUTPUT:
      ✅ ALL SECTIONS CURRENT (100% health)

    IF NOT 100%:
      → STOP workflow
      → Review which sections still stale
      → Go back to STEP 5.3 and update missing sections
      → Re-run verify_timestamps.py

    IF 100%:
      → Dashboard update COMPLETE ✅


TIMESTAMP HIERARCHY EXPLANATION
================================

CHILD TIMESTAMPS = Content timestamps (when section was last updated)
  Example: tabs.markets.aiInterpretation.updatedAt
  Meaning: "This section's content was updated at this time"
  When to update: Immediately after you write/update the content

PARENT TIMESTAMPS = Verification timestamps (signal that all children are current)
  Example: dashboard.sentimentCardsUpdated
  Meaning: "All child sections below this are verified current"
  When to update: ONLY after ALL child sections have fresh content + updated timestamps

CRITICAL RULE: ALWAYS update children BEFORE parents
  ✅ Correct: Update content → Update child timestamp → Update parent timestamp
  ❌ Wrong: Update parent timestamp → Update content (verification thinks work done!)

ANALOGY: Parent timestamp is the "green light" for the dashboard
  - Don't turn the green light on until work is actually complete
  - Updating parent first = false signal that everything is done
  - Dashboard would show "current" when sections are still stale


STALE SECTIONS REFERENCE (from ai_update_prompts.json):

    tabs.portfolio.aiInterpretation
    - Source: account_state.json, positions.json, signals_YYYY-MM-DD.json
    - Update: AI interprets current portfolio state + signal implications
    - Note: Portfolio allocation/actions handled automatically in Phase 2 via sync_portfolio_recommendation.py

    tabs.markets.aiInterpretation
    - Source: YYYY-MM-DD_Market_Sentiment_Overview.md, YYYY-MM-DD_Technical_Category_Overview.md
    - Update: AI synthesizes market intelligence (macro, crypto, tech)

    tabs.news_catalysts.aiInterpretation
    - Source: YYYY-MM-DD_RSS_Category_Overview.md, YYYY-MM-DD_key_themes.md
    - Update: AI summarizes news drivers and catalysts

    tabs.xsentiment.aiInterpretation
    - Source: YYYY-MM-DD_X_Twitter_Category_Overview.md, X sentiment summaries
    - Update: AI interprets X sentiment and trending topics

    tabs.technicals.aiInterpretation
    - Source: YYYY-MM-DD_Technical_Category_Overview.md, 7 technical summaries
    - Update: AI consolidates technical signals

    dashboard.dailyPlanner (key levels)
    - Source: Market Sentiment Overview, Technical summaries, signals
    - Update: AI curates daily key levels (SPY, QQQ, BTC) with entry/stop/target

DATA FLOW TO DASHBOARD:

    master-plan.md (YAML)
        ↓ (read by)
    research-dashboard.html (JavaScript)
        ↓ (renders to)
    Browser Display (Pilot sees live data)

WHAT WINGMAN DASH DOES NOT:
    ✗ Does NOT re-fetch from APIs
    ✗ Does NOT re-scrape RSS/YouTube/Twitter
    ✗ Does NOT re-calculate signals
    ✗ Does NOT modify recon data
    ✗ Does NOT modify prep research files

WHAT WINGMAN DASH USES:
    ✓ Data from wingman recon (unchanged)
    ✓ Research from wingman prep (unchanged)
    ✓ Existing signals_2025-10-23.json
    ✓ master-plan.md (to update with timestamps)
    ✓ research-dashboard.html (to update)

WHAT WINGMAN DASH PRODUCES:
    ✓ Updated master-plan.md (100% current timestamps)
    ✓ Updated research-dashboard.html (fresh display)
    ✓ Timestamp verification report (health status)
    ✓ AI update prompts (for stale interpretations)

STATUS NOTIFICATION:
    🎯 [GREEN] Wingman Dash running...

SUCCESS CRITERIA:
    ✅ Dashboard updates complete in <3 minutes
    ✅ Timestamp health = 100%
    ✅ All sections show current date
    ✅ AI interpretation updates identified
    ✅ Pilot receives final status report


================================================================================
CRITICAL RULES
================================================================================

RULE 1: NEVER RE-FETCH IN WINGMAN DASH
    ✗ WRONG: wingman dash calls Yahoo Finance
    ✗ WRONG: wingman dash scrapes RSS again
    ✓ RIGHT: wingman dash uses existing recon data

RULE 2: NEVER RE-CALCULATE IN WINGMAN DASH
    ✗ WRONG: wingman dash re-runs signal calculation
    ✓ RIGHT: wingman dash uses existing signals_2025-10-23.json

RULE 3: EACH STAGE IS INDEPENDENT
    ✓ recon produces data → prep consumes it
    ✓ prep produces research → dash consumes it
    ✓ dash produces visualization → Pilot sees it

RULE 4: TIMESTAMPS TELL THE STORY
    - If section timestamp = today → CURRENT (green light)
    - If section timestamp = yesterday → AGING (yellow light)
    - If section timestamp = 2+ days → STALE (red light)
    - Pilot cannot trade on stale data

RULE 5: AI UPDATES ARE ESSENTIAL
    - wingman dash identifies stale AI sections
    - AI reads research sources
    - AI updates interpretations with fresh analysis
    - Dashboard becomes 100% current


================================================================================
DAILY WORKFLOW EXAMPLE
================================================================================

TIME        ACTION                          DURATION    OUTPUT
---------------------------------------------------------------------------
9:30 AM     wingman recon                   ~2 min      Raw data files
            (Collect all market data)       (Automated)

9:32 AM     wingman prep                    ~30-45 min  Research summaries
            (AI: Read data → Create         (Manual AI  + signals
             summaries → Calculate signals)  work)

10:15 AM    wingman dash                    ~2-3 min    Updated dashboard
            (Sync prepared data to          (Automated) + stale section list
             dashboard, verify)

10:25 AM    [AI WORK] Update stale          ~10-20min   Fresh AI intrepret.
            interpretations                             Dashboard 100% current

10:45 AM    Trade Execution                 ~1-2 min    Trades placed
            (Pilot reviews and trades)                  Account updated

4:00 PM     EOD Review                      ~5-10 min   Daily journal entry
            (Wingman: eod review)                       Lessons logged


================================================================================
COMMAND USAGE SYNTAX
================================================================================

To the Pilot:
    "wingman recon"     →   Wingman executes recon workflow (automated)
                            python scripts/automation/run_all_scrapers.py

    "wingman prep"      →   Wingman executes prep workflow (manual AI)
                            Follow How_to_use_Research.txt (Steps 0-4)
                            Read data, create summaries, calculate signals

    "wingman dash"      →   Wingman executes dash workflow (automated)
                            python scripts/automation/run_workflow.py YYYY-MM-DD --skip-fetch --skip-signals

Wingman Response:
    ✓ Executes immediately
    ✓ Shows status notifications
    ✓ Reports progress in real-time
    ✓ Provides completion summary
    ✓ Uses appropriate flags to avoid data duplication


================================================================================
TROUBLESHOOTING
================================================================================

PROBLEM: "wingman prep" takes too long or doesn't complete
CAUSE: Complex - AI workflow has many steps (summaries + overviews)
FIX: This is EXPECTED - PREP is 30-45 minute manual workflow
     Follow How_to_use_Research.txt step-by-step

PROBLEM: PREP appears to complete instantly (seconds)
CAUSE: Trying to run PREP as automated script instead of manual
FIX: PREP is not automated - must manually execute How_to_use_Research.txt

PROBLEM: wingman dash takes 30+ minutes (should be 2-3 min)
CAUSE: Missing --skip-fetch --skip-signals flags
FIX: Use: python scripts/automation/run_workflow.py YYYY-MM-DD --skip-fetch --skip-signals

PROBLEM: wingman dash fails with "Yahoo Finance rate limit"
CAUSE: fetch_market_data.py still calling yfinance
FIX: Verify fetch_stock_indices() is disabled (returns None immediately)

PROBLEM: Dashboard shows stale data (timestamp yesterday)
CAUSE: AI updates not completed for stale sections
FIX: Check 2025-10-23_ai_update_prompts.json and update interpretations

PROBLEM: Signal score seems wrong
CAUSE: wingman prep not completed before wingman dash
FIX: Always run: recon → prep → dash (in order)

PROBLEM: Timestamp health < 100%
CAUSE: Some sections missing or stale timestamps
FIX: Run verify_timestamps.py --json to identify which sections
    Then update those sections in master-plan.md


================================================================================
FILES INVOLVED
================================================================================

DATA PIPELINE:
    wingman recon       →   Research/ (RSS, X, YouTube, Technical)
                        ↓
    wingman prep        →   Research/Technicals/... (7 summaries)
                        →   Research/X/... (4 summaries)
                        →   Research/.cache/ (signals, overviews)
                        ↓
    wingman dash        →   master-plan/master-plan.md
                        →   master-plan/research-dashboard.html

SCRIPTS:
    scripts/automation/run_all_scrapers.py           (recon)
    scripts/utilities/verify_scraper_data.py         (recon validation)

    Research/run_research_workflow.py                (prep - Steps 0-4)
    scripts/processing/calculate_signals.py          (prep - signals)

    scripts/automation/wingman_dash.py               (dash orchestrator)
    scripts/utilities/verify_timestamps.py           (dash - verification)
    scripts/automation/update_master_plan.py         (dash - update)
    scripts/utilities/verify_consistency.py          (dash - validation)
    scripts/utilities/sync_*.py                      (dash - sync scripts)


================================================================================
VERSION HISTORY
================================================================================

v1.1 - October 26, 2025
    - Clarified PREP is manual AI workflow (not automated script)
    - Removed deprecated --prep-only flag documentation
    - Updated timing: PREP is 30-45 min (not instant)
    - Added reference to unified WINGMAN_WORKFLOW_GUIDE.txt
    - Clear distinction: RECON automated, PREP manual, DASH automated

v1.0 - October 23, 2025
    - Initial Wingman Command Pipeline documentation
    - Three-stage workflow: recon → prep → dash
    - Clear separation of concerns
    - AI-driven interpretation updates
    - Timestamp-based verification system


================================================================================
END WINGMAN COMMAND PIPELINE
================================================================================

Status: PRODUCTION READY
Last Verified: October 23, 2025
Pilot, this pipeline defines our trading workflow. Follow it religiously.
Each stage is independent. Never skip steps. Never re-fetch in dash.

Safe trading. 🚀
